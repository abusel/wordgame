{"version":3,"sources":["logo.svg","Components/previousGuess.js","Components/previousGuesses.js","Components/keyboard.js","Components/guess.js","Pages/Curdle.js","App.js","reportWebVitals.js","index.js"],"names":["PreviousGuess","guess","colorObj","0","1","2","style","display","justifyContent","letterSpacing","map","letter","color","toUpperCase","PreviousGuesses","guesses","useEffect","console","log","Keyboard","setGuess","lettersGuessed","submitRef","letterClass","lClass","className","split","onClick","length","substring","e","current","dispatchEvent","Event","bubbles","cancelable","Guess","game","word","setGuesses","wordbank","setInvalid","ref","onSubmit","preventDefault","has","toLowerCase","TextField","id","label","variant","value","onChange","target","Curdle","useState","setLettersGuessed","forEach","useRef","win","reduce","prev","curr","Set","setWordbank","invalid","size","fetch","then","r","text","line","add","flexDirection","Dialog","open","DialogContent","Alert","severity","alignItems","width","marginLeft","marginRight","Typography","secret","output","hashMap","i","indexOf","find","arr","push","placeholder","outlined","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a45c8537.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","function PreviousGuess({ guess }) {\n  let colorObj = {\n    0: \"black\",\n    1: \"#FFD300\",\n    2: \"green\",\n  };\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        letterSpacing: \"1rem\",\n      }}\n    >\n      {guess.map((letter) => {\n        return (\n          <div>\n            <p\n              style={{\n                color: colorObj[letter[1]],\n              }}\n            >\n              {letter[0].toUpperCase()}\n            </p>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\nexport default PreviousGuess;\n","import PreviousGuess from \"./previousGuess\";\nimport { useEffect } from \"react\";\n\nfunction PreviousGuesses({ guesses }) {\n  useEffect(() => {\n    console.log(guesses);\n  }, [guesses]);\n\n  return (\n    <div>\n      {guesses.map((guess) => {\n        return <PreviousGuess guess={guess} />;\n      })}\n    </div>\n  );\n}\nexport default PreviousGuesses;\n","function Keyboard({ setGuess, guess, lettersGuessed, submitRef }) {\n  let topRow = \"qwertyuiop\";\n  let middleRow = \"asdfghjkl\";\n  let bottomRow = \"zxcvbnm\";\n  function letterClass(letter) {\n    let lClass = \"letter\";\n    if (lettersGuessed[letter] === 0) {\n      lClass += \" crossed\";\n    } else if (lettersGuessed[letter] === 1) {\n      lClass += \" yellow\";\n    } else if (lettersGuessed[letter] === 2) {\n      lClass += \" green\";\n    }\n    return lClass;\n  }\n\n  return (\n    <div className=\"keyboard\">\n      <div className=\"row\">\n        {topRow.split(\"\").map((letter) => {\n          return (\n            <button\n              className={letterClass(letter)}\n              onClick={() => {\n                if (guess.length < 5) {\n                  setGuess((guess) => guess + letter);\n                }\n              }}\n            >\n              {letter}\n            </button>\n          );\n        })}\n      </div>\n      <div className=\"row\">\n        {middleRow.split(\"\").map((letter) => {\n          return (\n            <button\n              className={letterClass(letter)}\n              onClick={() => {\n                if (guess.length < 5) {\n                  setGuess((guess) => guess + letter);\n                }\n              }}\n            >\n              {letter}\n            </button>\n          );\n        })}\n      </div>\n      <div className=\"row\">\n        {bottomRow.split(\"\").map((letter) => {\n          return (\n            <button\n              className={letterClass(letter)}\n              onClick={() => {\n                if (guess.length < 5) {\n                  setGuess((guess) => guess + letter);\n                }\n              }}\n            >\n              {letter}\n            </button>\n          );\n        })}\n      </div>\n      <div style={{ display: \"flex\" }}>\n        <button\n          className=\"menuButton\"\n          onClick={() => {\n            setGuess((guess) => guess.substring(0, guess.length - 1));\n          }}\n        >\n          Backspace\n        </button>\n        <button\n          className=\"menuButton\"\n          onClick={(e) => {\n            submitRef.current.dispatchEvent(\n              new Event(\"submit\", { bubbles: true, cancelable: true })\n            );\n          }}\n        >\n          Enter\n        </button>\n      </div>\n    </div>\n  );\n}\nexport default Keyboard;\n","import TextField from \"@mui/material/TextField\";\nimport { useState } from \"react\";\n\nfunction Guess({\n  guess,\n  setGuess,\n  game,\n  word,\n  guesses,\n  setGuesses,\n  submitRef,\n  wordbank,\n  setInvalid\n}) {\n\n  return (\n    <div style={{ justifyContent: \"center\", display: \"flex\" }}>\n      <form\n        ref={submitRef}\n        onSubmit={(e) => {\n          e.preventDefault();\n          if (guess.length === 5 && wordbank.has(guess.toLowerCase())) {\n            setInvalid(false)\n            setGuesses([...guesses, game(guess.toLowerCase(), word)]);\n            setGuess(\"\");\n          }\n          else{\n            setInvalid(true)\n          }\n        }}\n      >\n\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Guess\"\n          variant=\"outlined\"\n          value={guess}\n          onChange={(e) => {\n            if (e.target.value.length <= 5) {\n              setGuess(e.target.value);\n            }\n          }}\n        />\n      </form>\n    </div>\n  );\n}\nexport default Guess;\n","import PreviousGuesses from \"../Components/previousGuesses\";\nimport Keyboard from \"../Components/keyboard\";\nimport { useState, useEffect, useRef } from \"react\";\nimport Guess from \"../Components/guess\";\nimport { Typography } from \"@mui/material\";\nimport { Dialog } from \"@mui/material\";\nimport { DialogContent } from \"@mui/material\";\nimport { Alert } from \"@mui/material\";\n\nfunction Curdle() {\n  const [guess, setGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([]);\n  const [lettersGuessed, setLettersGuessed] = useState({});\n  let alphabet = \"qwertyuiopasdfghjklzxcvbnm\";\n  useEffect(() => {\n    alphabet.split(\"\").forEach((letter) => {\n      setLettersGuessed((lettersGuessed) => {\n        return { ...lettersGuessed, [letter]: 3 };\n      });\n    });\n  }, []);\n  let submitRef = useRef();\n\n\n  // Settings\n  let word = \"rinds\";\n  let hint = \"Natural armors\"\n  let maxGuesses = 4\n\n\n  let win = guesses[guesses.length -1] && guesses[guesses.length -1].reduce((prev, curr) => prev + curr[0], \"\") == word\n  let [wordbank, setWordbank] = useState(new Set()) \n  let [invalid, setInvalid] = useState(false)\n  useEffect(()=>{\n    wordbank.size === 0 && fetch('https://raw.githubusercontent.com/tabatkins/wordle-list/main/words')\n    .then((r) => r.text())\n    .then(text  => {\n      text.split(/\\r?\\n/).forEach(line => setWordbank(wordbank => wordbank.add(line)))\n    })\n    !wordbank.has(word) && setWordbank(wordbank => wordbank.add(word))\n  }, [])\n\n  function game(guess, secret) {\n    let bulls = 0;\n    let cows = 0;\n    let output = [];\n    let hashMap = {};\n    for (let i = 0; i < secret.length; i++) {\n      if (!hashMap[secret[i]]) {\n        hashMap[secret[i]] = 1;\n      } else {\n        hashMap[secret[i]]++;\n      }\n    }\n\n    for (let i = 0; i < guess.length; i++) {\n      if (guess[i] === secret[i]) {\n        let placeholder = { ...lettersGuessed };\n        bulls++;\n        if (hashMap[guess[i]] === 0) {\n          output[\n            output.indexOf(\n              output.find((arr) => {\n                return arr[0] === guess[i];\n              })\n            )\n          ] = [guess[i], 0];\n        }\n        hashMap[guess[i]]--;\n        output.push([guess[i], 2]);\n      } else if (hashMap[guess[i]] > 0) {\n        cows++;\n        hashMap[guess[i]]--;\n        output.push([guess[i], 1]);\n      } else {\n        let placeholder = { ...lettersGuessed };\n        placeholder[guess[i]] = 0;\n\n        output.push([guess[i], 0]);\n      }\n    }\n    let placeholder = { ...lettersGuessed };\n    output.forEach((letter) => {\n\n      if (letter[1] === 0 && placeholder[letter[0]] === 3) {\n        placeholder[letter[0]] = 0;\n      } else if (letter[1] === 2) {\n        placeholder[letter[0]] = 2;\n      } else if (letter[1] === 1 && placeholder[letter[0]] !== 2) {\n        placeholder[letter[0]] = 1;\n      }\n    });\n    setLettersGuessed(placeholder);\n    return output;\n  }\n  return (\n    <div style={{display: \"flex\", flexDirection: \"column\"}}>\n      <Dialog open={win}>\n        <DialogContent>\n          <Alert severity=\"success\">Winner! only {guesses.length} guess{guesses.length > 1 && \"es\"}</Alert>\n        </DialogContent>\n      </Dialog>\n      <Dialog open={!win && guesses.length === maxGuesses}>\n        <DialogContent>\n          <Alert severity=\"error\">Tough.. better luck tomorrow!  Today's word was {word}</Alert>\n        </DialogContent>\n      </Dialog>\n      <div style={{\n      display: \"flex\", \n      flexDirection: \"row\", alignItems: \"center\",\n      justifyContent: \"space-between\",\n      width: \"90%\", marginLeft: \"auto\", \n      marginRight: \"auto\"\n      }}>\n      <h1\n        style={{\n          marginLeft: \"5%\",\n        }}\n      >\n        Curdle\n      </h1>\n      <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\"}}>\n        <Typography>Guesses Left</Typography>\n        <Typography variant=\"h3\">{maxGuesses - guesses.length}</Typography>\n      </div>\n      </div>\n      \n      <PreviousGuesses guesses={guesses} />\n      <Guess\n        guess={guess}\n        setGuess={setGuess}\n        game={game}\n        word={word}\n        guesses={guesses}\n        setGuesses={setGuesses}\n        submitRef={submitRef}\n        wordbank={wordbank}\n        setInvalid={setInvalid}\n      />\n      {invalid && <Alert severity=\"error\" outlined>Invalid Word</Alert>}\n      <div>\n        <Typography style={{\n          marginLeft: \"30%\",\n        }}>Clue <sup>(New!)</sup></Typography>\n        <Typography style={{\n          marginLeft: \"35%\",\n          marginRight: \"35%\"\n        }}>{hint}</Typography>\n      </div>\n      <Keyboard\n        setGuess={setGuess}\n        guess={guess}\n        lettersGuessed={lettersGuessed}\n        submitRef={submitRef}\n      />\n    </div>\n  );\n}\nexport default Curdle;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Curdle from \"./Pages/Curdle\";\n\nfunction App() {\n  return (\n    <div>\n      <Curdle />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}